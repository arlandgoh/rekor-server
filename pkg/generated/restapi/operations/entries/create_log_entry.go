// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"github.com/spf13/viper"
	"github.com/go-openapi/runtime/middleware"
	"crypto/tls"
	"fmt"
	"golang.org/x/exp/slices"
)

// CreateLogEntryHandlerFunc turns a function with the right signature into a create log entry handler
type CreateLogEntryHandlerFunc func(CreateLogEntryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateLogEntryHandlerFunc) Handle(params CreateLogEntryParams) middleware.Responder {
	return fn(params)
}

// CreateLogEntryHandler interface for that can handle valid create log entry params
type CreateLogEntryHandler interface {
	Handle(CreateLogEntryParams) middleware.Responder
}

// NewCreateLogEntry creates a new http.Handler for the create log entry operation
func NewCreateLogEntry(ctx *middleware.Context, handler CreateLogEntryHandler) *CreateLogEntry {
	return &CreateLogEntry{Context: ctx, Handler: handler}
}

func getCommonNameCreateLogEntry(state *tls.ConnectionState) []string {
	var commonNameList []string
	for _, cert := range state.PeerCertificates {
		subject := cert.Subject
		// fmt.Printf("allowlist: %v", viper.GetStringSlice("common_name_allowlist"))
		commonNameList = append(commonNameList, subject.CommonName)
	}
	return commonNameList
}

func getSanEntryCreateLogEntry(state *tls.ConnectionState) []string {
	var SanEntryList []string
	for _, cert := range state.PeerCertificates {
		dnsEntry := cert.DNSNames
		// log.Printf("dnsEntry: %v", dnsEntry)
		SanEntryList = append(SanEntryList, dnsEntry...)
	}
	return SanEntryList
}

func isAuthorisedCreateLogEntry(commonNameAllowList []string, sanEntryList []string, commonName string) bool { //serialNumberAllowList []string, //, serialNumber string
	
	var passSAN bool
	resultSlice := []string{}
	checkMap := map[string]struct{}{}

	// CN Validation
	passCN := slices.Contains(commonNameAllowList, commonName) 

	// Matching between allowlist and SAN
	for _, commonName := range commonNameAllowList {
		checkMap[commonName] = struct{}{}
	}
	for _, commonName := range sanEntryList {
		if _, ok := checkMap[commonName]; ok {
			resultSlice = append(resultSlice, commonName)
		}
	}

	fmt.Printf("PASS CN %v", passCN)

	if passCN ==true {
		fmt.Printf("Passed CN? %v; ", passCN)
	} else {
		fmt.Printf("Passed CN? %v; ", passCN)
	}

	fmt.Printf("PASS SAN %v", resultSlice)

	if len(resultSlice) > 0 {
		passSAN = true
		fmt.Printf("Passed SAN? %v; ", passSAN)
    } else {
		passSAN = false
		fmt.Printf("Passed SAN? %v; ", passSAN)
    }

	//fmt.Printf("PASS CN %t", passCN)
	//fmt.Printf("PASS SAN %t", passSAN)

	return passCN || passSAN
}

/*
	CreateLogEntry swagger:route POST /api/v1/log/entries entries createLogEntry

# Creates an entry in the transparency log

Creates an entry in the transparency log for a detached signature, public key, and content. Items can be included in the request or fetched by the server when URLs are specified.
*/
type CreateLogEntry struct {
	Context *middleware.Context
	Handler CreateLogEntryHandler
}

func (o *CreateLogEntry) ServeHTTP(rw http.ResponseWriter, r *http.Request) {

	// https://umesh.dev/blog/how-to-implement-http-basic-auth-in-gogolang/#:~:text=Basic%20Access%20Authentication&text=The%20client%20sends%20HTTP%20requests,will%20look%20something%20shown%20below.
	// var serialNumberAllowList = []string{"691655277547158412307737030519005446175173121371"}
	var commonNameAllowList = viper.GetStringSlice("common_name_allowlist") //[]string{"localhost"}
	var commonNameAllowListDeploy = viper.GetStringSlice("common_name_allowlist_deploy")
	// var serialNumberList = getSerialNumber(r.TLS)

	var commonNameList = getCommonNameCreateLogEntry(r.TLS)
	var sanEntryList = getSanEntryCreateLogEntry(r.TLS)

	var commonNameListDeploy = getCommonNameCreateLogEntry(r.TLS)
	var sanEntryListDeploy = getSanEntryCreateLogEntry(r.TLS)

	if (len(commonNameList) <= 0) && (len(sanEntryList) <= 0) && (len(commonNameListDeploy) <= 0) && (len(sanEntryListDeploy) <= 0) {
		rw.WriteHeader(http.StatusUnauthorized)
		rw.Write([]byte(`{"message": "Invalid client certificate"}`))
		return           
	}

	// fmt.Printf("list of san name in chain %v", sanEntryList)
	//fmt.Printf("list of common name in chain %v", commonNameList)
	//fmt.Printf("list of common name in chain %v", commonNameList[len(commonNameList)-1])
	//fmt.Printf("list of common name in chain %v", commonNameList[0])

	if isAuthorisedCreateLogEntry(commonNameAllowList, sanEntryList, commonNameList[0]) { //serialNumberAllowList serialNumberList[len(serialNumberList)-1],
		//donothing
	} else if isAuthorisedCreateLogEntry(commonNameAllowListDeploy, sanEntryListDeploy, commonNameListDeploy[0]) {
		//donothing
	} else {
		rw.WriteHeader(http.StatusUnauthorized)
		rw.Write([]byte(`{"message": "Invalid credentials or client certificate"}`))
		return
	}

	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateLogEntryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
