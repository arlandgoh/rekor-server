// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"github.com/spf13/viper"
	"github.com/go-openapi/runtime/middleware"
	"crypto/tls"
	"fmt"
	"golang.org/x/exp/slices"
)

// GetLogEntryByUUIDHandlerFunc turns a function with the right signature into a get log entry by UUID handler
type GetLogEntryByUUIDHandlerFunc func(GetLogEntryByUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLogEntryByUUIDHandlerFunc) Handle(params GetLogEntryByUUIDParams) middleware.Responder {
	return fn(params)
}

// GetLogEntryByUUIDHandler interface for that can handle valid get log entry by UUID params
type GetLogEntryByUUIDHandler interface {
	Handle(GetLogEntryByUUIDParams) middleware.Responder
}

// NewGetLogEntryByUUID creates a new http.Handler for the get log entry by UUID operation
func NewGetLogEntryByUUID(ctx *middleware.Context, handler GetLogEntryByUUIDHandler) *GetLogEntryByUUID {
	return &GetLogEntryByUUID{Context: ctx, Handler: handler}
}


func getCommonNameGetLogEntry(state *tls.ConnectionState) []string {
	var commonNameList []string
	for _, cert := range state.PeerCertificates {
		subject := cert.Subject
		// fmt.Printf("allowlist: %v", viper.GetStringSlice("common_name_allowlist"))
		commonNameList = append(commonNameList, subject.CommonName)
	}
	return commonNameList
}

func getSanEntryGetLogEntry(state *tls.ConnectionState) []string {
	var SanEntryList []string
	for _, cert := range state.PeerCertificates {
		dnsEntry := cert.DNSNames
		// log.Printf("dnsEntry: %v", dnsEntry)
		SanEntryList = append(SanEntryList, dnsEntry...)
	}
	return SanEntryList
}

func isAuthorisedGetLogEntry(commonNameAllowList []string, sanEntryList []string, commonName string) bool { //serialNumberAllowList []string, //, serialNumber string
	
	var passSAN bool
	resultSlice := []string{}
	checkMap := map[string]struct{}{}

	// CN Validation
	passCN := slices.Contains(commonNameAllowList, commonName) 

	// Matching between allowlist and SAN
	for _, commonName := range commonNameAllowList {
		checkMap[commonName] = struct{}{}
	}
	for _, commonName := range sanEntryList {
		if _, ok := checkMap[commonName]; ok {
			resultSlice = append(resultSlice, commonName)
		}
	}

	fmt.Printf("PASS CN %v; ", passCN)

	if passCN ==true {
		fmt.Printf("Passed CN? %v; ", passCN)
	} else {
		fmt.Printf("Passed CN? %v; ", passCN)
	}

	fmt.Printf("PASS SAN %v", resultSlice)

	if len(resultSlice) > 0 {
		passSAN = true
		fmt.Printf("Passed SAN? %v", passSAN)
    } else {
		passSAN = false
		fmt.Printf("Passed SAN? %v", passSAN)
    }

	//fmt.Printf("PASS CN %t", passCN)
	//fmt.Printf("PASS SAN %t", passSAN)

	return passCN || passSAN
}

/*
	GetLogEntryByUUID swagger:route GET /api/v1/log/entries/{entryUUID} entries getLogEntryByUuid

# Get log entry and information required to generate an inclusion proof for the entry in the transparency log

Returns the entry, root hash, tree size, and a list of hashes that can be used to calculate proof of an entry being included in the transparency log
*/
type GetLogEntryByUUID struct {
	Context *middleware.Context
	Handler GetLogEntryByUUIDHandler
}

func (o *GetLogEntryByUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {

	var commonNameAllowList = viper.GetStringSlice("common_name_allowlist")
	var commonNameAllowListDeploy = viper.GetStringSlice("common_name_allowlist_deploy")
	
	var commonNameList = getCommonNameGetLogEntry(r.TLS)
	var sanEntryList = getSanEntryGetLogEntry(r.TLS)
	
	var commonNameListDeploy = getCommonNameGetLogEntry(r.TLS)
	var sanEntryListDeploy = getSanEntryGetLogEntry(r.TLS)

	// fmt.Printf("list of san entry name in chain %v", sanEntryList)
	// fmt.Printf("list of common name in chain %v", commonNameList)

	if (len(commonNameList) <= 0) && (len(sanEntryList) <= 0) && (len(commonNameListDeploy) <= 0) && (len(sanEntryListDeploy) <= 0) {
		rw.WriteHeader(http.StatusUnauthorized)
		rw.Write([]byte(`{"message": "Invalid client certificate"}`))
		return           
	}

	if isAuthorisedGetLogEntry(commonNameAllowList, sanEntryList, commonNameList[0]) { 
		//donothing
	} else if isAuthorisedCreateLogEntry(commonNameAllowListDeploy, sanEntryListDeploy, commonNameListDeploy[0]) {
		//donothing
	} else {
		rw.WriteHeader(http.StatusUnauthorized)
		rw.Write([]byte(`{"message": "Invalid credentials or client certificate"}`))
		return
	}

	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLogEntryByUUIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
